services:
  ##############
  ### Flight ###
  ##############

  server-flight:
    container_name: server-flight
    build:
      dockerfile: dockerfile
      context: ./flight/src
    environment:
      - ENV=PRD
      - DB_ADDR=database-flight
      - PG_DATABASE=saga-flight
      - PG_USER=saga-flight
      - PG_PASSWORD=saga-flight
    ports:
      - "3000:3000"
    network_mode:  host
    depends_on:
      - database-flight

  database-flight:
    container_name: database-flight
    build:
      dockerfile: dockerfile
      context: ./flight/infra/postgres
    restart: always
    environment:
      POSTGRES_USER: saga-flight
      POSTGRES_PASSWORD: saga-flight
    network_mode:  host
    volumes:
      - pg-data-flight:/var/lib/postgresql/data
      - ./flight/infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    entrypoint: docker-entrypoint.sh -c 'config_file=/etc/postgresql/postgresql.conf'

  setup-flight:
    container_name: setup-flight
    build:
      dockerfile: dockerfile
      context: ./flight/infra/setup
    volumes:
      - ./flight/infra/setup/setup.py:/setup/setup.py
    network_mode:  host
    depends_on:
      - database-flight

  #############
  ### Hotel ###
  #############

  server-hotel:
    container_name: server-hotel
    build:
      dockerfile: dockerfile
      context: ./hotel/src
    environment:
      - ENV=PRD
      - DB_ADDR=database-hotel
      - PG_DATABASE=saga-hotel
      - PG_USER=saga-hotel
      - PG_PASSWORD=saga-hotel
    ports:
      - "3001:3001"
    network_mode:  host
    depends_on:
      - database-hotel

  database-hotel:
    container_name: database-hotel
    build:
      dockerfile: dockerfile
      context: ./hotel/infra/postgres
    restart: always
    environment:
      POSTGRES_USER: saga-hotel
      POSTGRES_PASSWORD: saga-hotel
    network_mode:  host
    volumes:
      - pg-data-hotel:/var/lib/postgresql/data
      - ./hotel/infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    entrypoint: docker-entrypoint.sh -c 'config_file=/etc/postgresql/postgresql.conf'

  setup-hotel:
    container_name: setup-hotel
    build:
      dockerfile: dockerfile
      context: ./hotel/infra/setup
    volumes:
      - ./hotel/infra/setup/setup.py:/setup/setup.py
    network_mode:  host
    depends_on:
      - database-hotel

  ##############
  ### Shared ###
  ##############

  datadog-agent:
    image: datadog/agent:latest
    container_name: datadog-agent
    environment:
      - DD_API_KEY=<DataDog API Key>
      - DD_HOSTNAME=datadog-agent
      - DD_SITE=us5.datadoghq.com
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    networks:
      - apps

  adminer:
    container_name: adminer
    image: adminer:4
    depends_on:
      - database-flight
      - database-hotel
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    ports:
      - "3002:8080"

volumes:
  pg-data-flight:
  pg-data-hotel:

networks:
  apps:
    driver: bridge